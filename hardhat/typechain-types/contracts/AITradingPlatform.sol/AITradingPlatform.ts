/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AITradingPlatform {
  export type AIAgentStruct = {
    agentAddress: AddressLike;
    name: string;
    successRate: BigNumberish;
    totalTrades: BigNumberish;
    successfulTrades: BigNumberish;
    isActive: boolean;
  };

  export type AIAgentStructOutput = [
    agentAddress: string,
    name: string,
    successRate: bigint,
    totalTrades: bigint,
    successfulTrades: bigint,
    isActive: boolean
  ] & {
    agentAddress: string;
    name: string;
    successRate: bigint;
    totalTrades: bigint;
    successfulTrades: bigint;
    isActive: boolean;
  };

  export type TradeStruct = {
    id: BigNumberish;
    user: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    timestamp: BigNumberish;
    isCompleted: boolean;
    agentSignature: string;
  };

  export type TradeStructOutput = [
    id: bigint,
    user: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    timestamp: bigint,
    isCompleted: boolean,
    agentSignature: string
  ] & {
    id: bigint;
    user: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    timestamp: bigint;
    isCompleted: boolean;
    agentSignature: string;
  };

  export type UserStruct = {
    isRegistered: boolean;
    totalDeposited: BigNumberish;
    totalWithdrawn: BigNumberish;
    balance: BigNumberish;
    lastActivity: BigNumberish;
    isActive: boolean;
  };

  export type UserStructOutput = [
    isRegistered: boolean,
    totalDeposited: bigint,
    totalWithdrawn: bigint,
    balance: bigint,
    lastActivity: bigint,
    isActive: boolean
  ] & {
    isRegistered: boolean;
    totalDeposited: bigint;
    totalWithdrawn: bigint;
    balance: bigint;
    lastActivity: bigint;
    isActive: boolean;
  };
}

export interface AITradingPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "PRICE_DECIMALS"
      | "activeAgents"
      | "addSupportedToken"
      | "aiAgents"
      | "chainlinkFeeds"
      | "depositETH"
      | "depositToken"
      | "emergencyWithdraw"
      | "executeTrade"
      | "getAIAgentInfo"
      | "getLatestPrice"
      | "getSupportedTokens"
      | "getTotalAgents"
      | "getTotalUsers"
      | "getTrade"
      | "getUserBalance"
      | "getUserInfo"
      | "nextTradeId"
      | "oracleUpdater"
      | "owner"
      | "pause"
      | "paused"
      | "platformFee"
      | "registerAIAgent"
      | "registerUser"
      | "registeredUsers"
      | "removeSupportedToken"
      | "renounceOwnership"
      | "setChainlinkFeed"
      | "setOracleUpdater"
      | "storedPriceUSD"
      | "supportedTokens"
      | "tokenAmountToUsd"
      | "tokenList"
      | "trades"
      | "transferOwnership"
      | "unpause"
      | "updatePlatformFee"
      | "updatePrice"
      | "updatePriceBatch"
      | "userTokenBalances"
      | "users"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIAgentRegistered"
      | "AIAgentUpdated"
      | "ChainlinkFeedSet"
      | "Deposit"
      | "FeeUpdated"
      | "OracleUpdaterSet"
      | "OwnershipTransferred"
      | "Paused"
      | "PriceBatchUpdated"
      | "PriceUpdated"
      | "TokenAdded"
      | "TokenRemoved"
      | "TradeExecuted"
      | "Unpaused"
      | "UserRegistered"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAgents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aiAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAIAgentInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTradeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAIAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storedPriceUSD",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmountToUsd",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aiAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAIAgentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTradeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAIAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmountToUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace AIAgentRegisteredEvent {
  export type InputTuple = [agent: AddressLike, name: string];
  export type OutputTuple = [agent: string, name: string];
  export interface OutputObject {
    agent: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AIAgentUpdatedEvent {
  export type InputTuple = [agent: AddressLike, successRate: BigNumberish];
  export type OutputTuple = [agent: string, successRate: bigint];
  export interface OutputObject {
    agent: string;
    successRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkFeedSetEvent {
  export type InputTuple = [token: AddressLike, feed: AddressLike];
  export type OutputTuple = [token: string, feed: string];
  export interface OutputObject {
    token: string;
    feed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdaterSetEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceBatchUpdatedEvent {
  export type InputTuple = [
    tokens: AddressLike[],
    prices: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokens: string[],
    prices: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    tokens: string[];
    prices: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, price: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    user: AddressLike,
    agent: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: bigint,
    user: string,
    agent: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    tradeId: bigint;
    user: string;
    agent: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AITradingPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): AITradingPlatform;
  waitForDeployment(): Promise<this>;

  interface: AITradingPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  PRICE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  activeAgents: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  aiAgents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        agentAddress: string;
        name: string;
        successRate: bigint;
        totalTrades: bigint;
        successfulTrades: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  chainlinkFeeds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  depositETH: TypedContractMethod<[], [void], "payable">;

  depositToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTrade: TypedContractMethod<
    [
      user: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      expectedAmountOut: BigNumberish,
      agentSignature: string
    ],
    [void],
    "nonpayable"
  >;

  getAIAgentInfo: TypedContractMethod<
    [agent: AddressLike],
    [AITradingPlatform.AIAgentStructOutput],
    "view"
  >;

  getLatestPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  getTotalAgents: TypedContractMethod<[], [bigint], "view">;

  getTotalUsers: TypedContractMethod<[], [bigint], "view">;

  getTrade: TypedContractMethod<
    [tradeId: BigNumberish],
    [AITradingPlatform.TradeStructOutput],
    "view"
  >;

  getUserBalance: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [user: AddressLike],
    [AITradingPlatform.UserStructOutput],
    "view"
  >;

  nextTradeId: TypedContractMethod<[], [bigint], "view">;

  oracleUpdater: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  registerAIAgent: TypedContractMethod<[name: string], [void], "nonpayable">;

  registerUser: TypedContractMethod<[], [void], "nonpayable">;

  registeredUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  removeSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setChainlinkFeed: TypedContractMethod<
    [token: AddressLike, feed: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracleUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  storedPriceUSD: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  tokenAmountToUsd: TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      tokenDecimals: BigNumberish
    ],
    [bigint],
    "view"
  >;

  tokenList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  trades: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        user: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        amountOut: bigint;
        timestamp: bigint;
        isCompleted: boolean;
        agentSignature: string;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePriceBatch: TypedContractMethod<
    [tokens: AddressLike[], prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  userTokenBalances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, boolean] & {
        isRegistered: boolean;
        totalDeposited: bigint;
        totalWithdrawn: bigint;
        balance: bigint;
        lastActivity: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeAgents"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aiAgents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        agentAddress: string;
        name: string;
        successRate: bigint;
        totalTrades: bigint;
        successfulTrades: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainlinkFeeds"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      user: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      expectedAmountOut: BigNumberish,
      agentSignature: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAIAgentInfo"
  ): TypedContractMethod<
    [agent: AddressLike],
    [AITradingPlatform.AIAgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalAgents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrade"
  ): TypedContractMethod<
    [tradeId: BigNumberish],
    [AITradingPlatform.TradeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [AITradingPlatform.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextTradeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerAIAgent"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainlinkFeed"
  ): TypedContractMethod<
    [token: AddressLike, feed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storedPriceUSD"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenAmountToUsd"
  ): TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      tokenDecimals: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "trades"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        user: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        amountOut: bigint;
        timestamp: bigint;
        isCompleted: boolean;
        agentSignature: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceBatch"
  ): TypedContractMethod<
    [tokens: AddressLike[], prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userTokenBalances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, boolean] & {
        isRegistered: boolean;
        totalDeposited: bigint;
        totalWithdrawn: bigint;
        balance: bigint;
        lastActivity: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AIAgentRegistered"
  ): TypedContractEvent<
    AIAgentRegisteredEvent.InputTuple,
    AIAgentRegisteredEvent.OutputTuple,
    AIAgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AIAgentUpdated"
  ): TypedContractEvent<
    AIAgentUpdatedEvent.InputTuple,
    AIAgentUpdatedEvent.OutputTuple,
    AIAgentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkFeedSet"
  ): TypedContractEvent<
    ChainlinkFeedSetEvent.InputTuple,
    ChainlinkFeedSetEvent.OutputTuple,
    ChainlinkFeedSetEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdaterSet"
  ): TypedContractEvent<
    OracleUpdaterSetEvent.InputTuple,
    OracleUpdaterSetEvent.OutputTuple,
    OracleUpdaterSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceBatchUpdated"
  ): TypedContractEvent<
    PriceBatchUpdatedEvent.InputTuple,
    PriceBatchUpdatedEvent.OutputTuple,
    PriceBatchUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "AIAgentRegistered(address,string)": TypedContractEvent<
      AIAgentRegisteredEvent.InputTuple,
      AIAgentRegisteredEvent.OutputTuple,
      AIAgentRegisteredEvent.OutputObject
    >;
    AIAgentRegistered: TypedContractEvent<
      AIAgentRegisteredEvent.InputTuple,
      AIAgentRegisteredEvent.OutputTuple,
      AIAgentRegisteredEvent.OutputObject
    >;

    "AIAgentUpdated(address,uint256)": TypedContractEvent<
      AIAgentUpdatedEvent.InputTuple,
      AIAgentUpdatedEvent.OutputTuple,
      AIAgentUpdatedEvent.OutputObject
    >;
    AIAgentUpdated: TypedContractEvent<
      AIAgentUpdatedEvent.InputTuple,
      AIAgentUpdatedEvent.OutputTuple,
      AIAgentUpdatedEvent.OutputObject
    >;

    "ChainlinkFeedSet(address,address)": TypedContractEvent<
      ChainlinkFeedSetEvent.InputTuple,
      ChainlinkFeedSetEvent.OutputTuple,
      ChainlinkFeedSetEvent.OutputObject
    >;
    ChainlinkFeedSet: TypedContractEvent<
      ChainlinkFeedSetEvent.InputTuple,
      ChainlinkFeedSetEvent.OutputTuple,
      ChainlinkFeedSetEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "OracleUpdaterSet(address)": TypedContractEvent<
      OracleUpdaterSetEvent.InputTuple,
      OracleUpdaterSetEvent.OutputTuple,
      OracleUpdaterSetEvent.OutputObject
    >;
    OracleUpdaterSet: TypedContractEvent<
      OracleUpdaterSetEvent.InputTuple,
      OracleUpdaterSetEvent.OutputTuple,
      OracleUpdaterSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceBatchUpdated(address[],uint256[],uint256)": TypedContractEvent<
      PriceBatchUpdatedEvent.InputTuple,
      PriceBatchUpdatedEvent.OutputTuple,
      PriceBatchUpdatedEvent.OutputObject
    >;
    PriceBatchUpdated: TypedContractEvent<
      PriceBatchUpdatedEvent.InputTuple,
      PriceBatchUpdatedEvent.OutputTuple,
      PriceBatchUpdatedEvent.OutputObject
    >;

    "PriceUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "TokenAdded(address)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenRemoved(address)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    "TradeExecuted(uint256,address,address,address,address,uint256,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserRegistered(address,uint256)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "Withdrawal(address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
